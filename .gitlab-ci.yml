workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

stages:
  - format
  - vet
  - security
  - test
  - build-docker
  - release
  - deploy

before_script:
  - echo "Running before_script steps..."
  - go mod download

format:
  stage: format
  image: golang:latest
  script:
    - go fmt ./...
  tags:
    - student-group4-runner

vet:
  stage: vet
  image: golang:latest
  script:
    - go vet -json ./...
  tags:
    - student-group4-runner

security:
  stage: security
  image: golang:latest
  script:
    - go install github.com/securego/gosec/v2/cmd/gosec@latest
    - gosec ./...
  tags:
    - student-group4-runner

test:
  stage: test
  image: golang:latest
  script:
    - go test ./... -v
  tags:
    - student-group4-runner

build:
  stage: build-docker
  image: docker:20.10.9
  services:
    - name: docker:20.10.9-dind
  before_script:
    - apk add --no-cache docker-compose
  script:
    - echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    # Build and tag the Docker image
    - docker-compose -f docker-compose.yml build
    # Push the image to GitLab's registry
    - docker-compose -f docker-compose.yml push
  only:
     - dev
     - main

release:
  stage: release
  image: node:18
  script:
    - npm install
    - npx semantic-release
  only:
    - main
  when: manual
  variables:
    GITLAB_TOKEN: $CI_JOB_TOKEN

deploy:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Deploying to VPS"

    # Install SSH client
    - apk add --no-cache openssh

    # Save SSH key for the deployment process
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

    # SSH into VPS and run the deployment commands
    - |
      ssh -o StrictHostKeyChecking=no -p 32222 -i ~/.ssh/id_rsa student-group4@54.36.99.212 << 'EOF'
        cd /home/student-group4/tp2/hooly
        # Set the environment variables for MongoDB and other settings
        export MONGODB_URI="$MONGODB_URI"
        export MONGODB_DB_NAME="$MONGODB_NAME"
        export ALLOWED_ORIGINS="$ALLOWED_ORIGINS"

        # Start the application with the new image
        sudo docker-compose-pull
        sudo docker-compose-up -d
      EOF
  tags:
    - student-group4-runner
  only:
    - main
